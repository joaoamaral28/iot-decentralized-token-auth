/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 at Sun Nov 24 17:16:04 2019. */

#ifndef PB_BLE_MESSAGE_PB_H_INCLUDED
#define PB_BLE_MESSAGE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Header_MessageType {
    Header_MessageType_AuthTicket = 1,
    Header_MessageType_NonceExchange = 2,
    Header_MessageType_DriversInfo = 3,
    Header_MessageType_DeviceAccessRequest = 4,
    Header_MessageType_DeviceAccessResponse = 5,
    Header_MessageType_ErrorMsg = 6,
    Header_MessageType_DriverAuthTicket = 7
} Header_MessageType;
#define _Header_MessageType_MIN Header_MessageType_AuthTicket
#define _Header_MessageType_MAX Header_MessageType_DriverAuthTicket
#define _Header_MessageType_ARRAYSIZE ((Header_MessageType)(Header_MessageType_DriverAuthTicket+1))

/* Struct definitions */
typedef struct _AuthenticationTicket {
    pb_callback_t secret;
    pb_callback_t pub;
    pb_callback_t signature;
    pb_callback_t auth_nonce;
/* @@protoc_insertion_point(struct:AuthenticationTicket) */
} AuthenticationTicket;

typedef struct _DriverInfo {
    pb_callback_t api_description;
    pb_callback_t public_key;
    pb_callback_t a3c_dd_uuid;
/* @@protoc_insertion_point(struct:DriverInfo) */
} DriverInfo;

typedef struct _ErrorMessage {
    pb_callback_t error_code;
    pb_callback_t error_description;
/* @@protoc_insertion_point(struct:ErrorMessage) */
} ErrorMessage;

typedef struct _MessageResponse {
    pb_callback_t target_uuid;
    pb_callback_t response;
/* @@protoc_insertion_point(struct:MessageResponse) */
} MessageResponse;

typedef struct _NonceExchangeMessage {
    pb_callback_t enc_nonce;
    pb_callback_t clear_nonce;
/* @@protoc_insertion_point(struct:NonceExchangeMessage) */
} NonceExchangeMessage;

typedef struct _DriversInfoMessage {
    pb_size_t driver_info_count;
    DriverInfo driver_info[5];
/* @@protoc_insertion_point(struct:DriversInfoMessage) */
} DriversInfoMessage;

typedef struct _Header {
    Header_MessageType msg_type;
/* @@protoc_insertion_point(struct:Header) */
} Header;

typedef struct _MessageRequest {
    pb_callback_t target_uuid;
    pb_callback_t action;
    bool has_delta;
    int32_t delta;
/* @@protoc_insertion_point(struct:MessageRequest) */
} MessageRequest;

typedef struct _Payload {
    bool has_auth_ticket;
    AuthenticationTicket auth_ticket;
    bool has_nonce_exc_msg;
    NonceExchangeMessage nonce_exc_msg;
    bool has_drivers_info_msg;
    DriversInfoMessage drivers_info_msg;
    bool has_response;
    MessageResponse response;
    bool has_request;
    MessageRequest request;
    bool has_error_msg;
    ErrorMessage error_msg;
/* @@protoc_insertion_point(struct:Payload) */
} Payload;

typedef struct _BLEmessage {
    Header header;
    Payload payload;
/* @@protoc_insertion_point(struct:BLEmessage) */
} BLEmessage;

/* Default values for struct fields */

/* Initializer values for message structs */
#define BLEmessage_init_default                  {Header_init_default, Payload_init_default}
#define Header_init_default                      {_Header_MessageType_MIN}
#define Payload_init_default                     {false, AuthenticationTicket_init_default, false, NonceExchangeMessage_init_default, false, DriversInfoMessage_init_default, false, MessageResponse_init_default, false, MessageRequest_init_default, false, ErrorMessage_init_default}
#define MessageRequest_init_default              {{{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define MessageResponse_init_default             {{{NULL}, NULL}, {{NULL}, NULL}}
#define AuthenticationTicket_init_default        {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define NonceExchangeMessage_init_default        {{{NULL}, NULL}, {{NULL}, NULL}}
#define ErrorMessage_init_default                {{{NULL}, NULL}, {{NULL}, NULL}}
#define DriversInfoMessage_init_default          {0, {DriverInfo_init_default, DriverInfo_init_default, DriverInfo_init_default, DriverInfo_init_default, DriverInfo_init_default}}
#define DriverInfo_init_default                  {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define BLEmessage_init_zero                     {Header_init_zero, Payload_init_zero}
#define Header_init_zero                         {_Header_MessageType_MIN}
#define Payload_init_zero                        {false, AuthenticationTicket_init_zero, false, NonceExchangeMessage_init_zero, false, DriversInfoMessage_init_zero, false, MessageResponse_init_zero, false, MessageRequest_init_zero, false, ErrorMessage_init_zero}
#define MessageRequest_init_zero                 {{{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define MessageResponse_init_zero                {{{NULL}, NULL}, {{NULL}, NULL}}
#define AuthenticationTicket_init_zero           {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define NonceExchangeMessage_init_zero           {{{NULL}, NULL}, {{NULL}, NULL}}
#define ErrorMessage_init_zero                   {{{NULL}, NULL}, {{NULL}, NULL}}
#define DriversInfoMessage_init_zero             {0, {DriverInfo_init_zero, DriverInfo_init_zero, DriverInfo_init_zero, DriverInfo_init_zero, DriverInfo_init_zero}}
#define DriverInfo_init_zero                     {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define AuthenticationTicket_secret_tag          1
#define AuthenticationTicket_pub_tag             2
#define AuthenticationTicket_signature_tag       3
#define AuthenticationTicket_auth_nonce_tag      4
#define DriverInfo_api_description_tag           1
#define DriverInfo_public_key_tag                2
#define DriverInfo_a3c_dd_uuid_tag               3
#define ErrorMessage_error_code_tag              1
#define ErrorMessage_error_description_tag       2
#define MessageResponse_target_uuid_tag          1
#define MessageResponse_response_tag             2
#define NonceExchangeMessage_enc_nonce_tag       1
#define NonceExchangeMessage_clear_nonce_tag     2
#define DriversInfoMessage_driver_info_tag       1
#define Header_msg_type_tag                      1
#define MessageRequest_target_uuid_tag           1
#define MessageRequest_action_tag                2
#define MessageRequest_delta_tag                 3
#define Payload_auth_ticket_tag                  1
#define Payload_nonce_exc_msg_tag                2
#define Payload_drivers_info_msg_tag             3
#define Payload_response_tag                     4
#define Payload_request_tag                      5
#define Payload_error_msg_tag                    6
#define BLEmessage_header_tag                    1
#define BLEmessage_payload_tag                   2

/* Struct field encoding specification for nanopb */
extern const pb_field_t BLEmessage_fields[3];
extern const pb_field_t Header_fields[2];
extern const pb_field_t Payload_fields[7];
extern const pb_field_t MessageRequest_fields[4];
extern const pb_field_t MessageResponse_fields[3];
extern const pb_field_t AuthenticationTicket_fields[5];
extern const pb_field_t NonceExchangeMessage_fields[3];
extern const pb_field_t ErrorMessage_fields[3];
extern const pb_field_t DriversInfoMessage_fields[2];
extern const pb_field_t DriverInfo_fields[4];

/* Maximum encoded size of messages (where known) */
/* BLEmessage_size depends on runtime parameters */
#define Header_size                              2
/* Payload_size depends on runtime parameters */
/* MessageRequest_size depends on runtime parameters */
/* MessageResponse_size depends on runtime parameters */
/* AuthenticationTicket_size depends on runtime parameters */
/* NonceExchangeMessage_size depends on runtime parameters */
/* ErrorMessage_size depends on runtime parameters */
/* DriversInfoMessage_size depends on runtime parameters */
/* DriverInfo_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define BLE_MESSAGE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
